@page "/"

@using LiteDBHelper
<MudStack Style="width:auto">
<MudStack row Class="d-flex flex-grow-1">

    <MudTextField class="flex-grow-1" @bind-Value="SearchText" @ref="TxtSearch" Placeholder="@placeHolder" Variant="Variant.Text" @onkeyup="SearchData" Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Tertiary"></MudTextField>

    <MudButton class="mt-5" Color="Color.Primary" Variant="Variant.Filled" @onclick="SearchDataClick">搜索</MudButton>

</MudStack>



@if (result == null)
{
    <p><em>@Message</em></p>
}
else
{
    <MudDataGrid Items="@result">
        <Columns>
            <PropertyColumn Property="x => x.AccountCategory" Title="类型" />
            <PropertyColumn Property="x => x.AccountName" Title="名称" />
            <PropertyColumn Property="x => x.AccountKey" Title="Key" />
            <PropertyColumn Property="x => x.AccountValue" Title="Value" />
        </Columns>
    </MudDataGrid>

}
</MudStack>

@code {
    private Account[] accounts;
    private Account[] result;
    public string SearchText { get; set; }
    private string placeHolder;
    private string Message;
    AccountService service;
    public MudTextField<string> TxtSearch { get; set; }
    public MudIconButton BtnSearch { get; set; }
    protected override async Task OnInitializedAsync()
    {
        placeHolder = "请输入Key";
        Message = "请输入Key";
    }

    private void Init()
    {
        try
        {
            service = new AccountService(SearchText, Config.IV, Config.DBPwd, Config.DBName);
            accounts = service.GetAllAccounts().ToArray();
            result = accounts;
            ResetSearch();
        }
        catch (Exception ex)
        {
            service = null;
            Message = ex.Message;
        }

    }

    private void ResetSearch()
    {
        SearchText = string.Empty;
        placeHolder = "请输入搜索关键词";
        TxtSearch.Clear();
    }

    private void SearchDataClick()
    {
        if (service == null)
        {
            Init();
            return;
        }
        if (string.IsNullOrEmpty(SearchText))
        {
            result = accounts;
        }
        else
        {
            result = accounts.Where(p => p.AccountName.Contains(SearchText, StringComparison.OrdinalIgnoreCase)
                                        || p.AccountKey.Contains(SearchText, StringComparison.OrdinalIgnoreCase)
                                        || p.AccountCategory.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
                            .ToArray();
            ResetSearch();
        }
    }

    private void SearchData(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchDataClick();
        }
    }
}
